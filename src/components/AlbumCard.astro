---
import { IdToSlug } from "../utils/hash";
import { Icon } from "astro-icon/components";
import PostCardInfoIcon from "./widgets/PostCardInfoIcon.astro";
import { GetCoverURLForUnspecifiedEntry } from "../utils/cover";
import YukinaConfig from "../../yukina.config";
import { formatDate } from "../utils/date";

export interface Props {
  id: string;
  title: string;
  published: Date;
  category?: string;
  tags?: string[];
  melodies: {
    audioUrl: string;
    name: string;
    hasNotes: boolean;
    notesUrl: string;
  }[];
  sourceLink?: string;
  notesLink: string;
  description?: string;
  isCompleted: boolean;
  image?: string;
  readingMetadata: { time: number; wordCount: number };
}

const props = Astro.props;
const entryID = IdToSlug(props.id);
const contentUrl = props.sourceLink;
---

<div
  class="mx-3 flex flex-col rounded-3xl bg-[var(--card-color)] lg:mx-0 pb-6"
>
  <a
    href={contentUrl}
    class="relative h-[128px] transition-all hover:brightness-75 lg:hidden"
  >
    <img
      class="lozad absolute left-0 top-0 h-full w-full rounded-t-3xl object-cover lg:hidden"
      data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
      alt="CoverPost"
    />
    <div class="absolute bottom-2 w-full">
      <div class="mx-2 flex flex-row justify-between">
        <div
          class="flex flex-row items-center space-x-2 rounded-md bg-black/50 px-1.5 py-0.5 text-[var(--primary-color-lighten)] dark:text-[var(--text-color)]"
        >
          <Icon name="cuida:calendar-outline" />
          <span class="select-none">
            {!props.isCompleted && ("Last Update: ")} {formatDate(props.published, YukinaConfig.locale)}
          </span>
        </div>
      </div>
    </div>
  </a>
  <div class="flex h-[128px] flex-row lg:h-[212px]">
    <div
      class="flex w-full flex-col justify-between pb-5 pl-5 pr-6 pt-3 lg:w-[calc(var(--page-width-lg)-404px)] lg:py-7 lg:pr-0 xl:w-[calc(var(--page-width-xl)-676px)]"
    >
      <div class="flex w-full flex-row items-center">
        <div
          class="mx-2 hidden h-6 w-1 translate-y-[1px] rounded-lg bg-[var(--primary-color)] lg:block"
        >
        </div>
        <a href={props.notesLink} class="title">
          <p class="truncate">{props.title}</p>
          <Icon
            name="cuida:caret-right-outline"
            class="translate-y-[0.07rem] text-[var(--primary-color)]"
          />
        </a>
      </div>
      <div class="ml-2 hidden lg:block">
        <ul class="flex flex-row space-x-4">
          <li class="data space-x-2">
            <PostCardInfoIcon name="cuida:calendar-outline" />
            <span class="select-none">
              {!props.isCompleted && ("Last Update: ")} {formatDate(props.published, YukinaConfig.locale)}
            </span>
          </li>
        </ul>
      </div>
      <div class="lg:ml-2">
        <p class="desc">{props.description}</p>
      </div>
    </div>
    <div class="cover-container">
      <a href={contentUrl} class="cover-wrapper">
        <Icon class="right-icon" name="cuida:caret-right-outline" size={96} />
        <img
          class="lozad h-[212px] w-[404px] select-none rounded-r-3xl object-cover dark:brightness-90"
          data-src={props.image ?? GetCoverURLForUnspecifiedEntry(entryID)}
          alt="PostCover"
        />
      </a>
    </div>
  </div>
  <div>
    {
      <div class="data ml-6 space-x-2">
        <ul class="flex flex-col items-center space-y-3">
          {props.melodies.map((melody, index) => (
            <li class="flex select-none flex-row items-center text-[var(--text-color-lighten)]">
              <div>
                <div class="mb-2 flex flex-row">
                  <p>
                    {melody.name}
                  </p>
                  {melody.hasNotes && (
                    <a href={props.notesLink} class="data ml-2">
                      <Icon
                        name="cuida:open-book-outline"
                        class="translate-y-[0.07rem] text-[var(--primary-color)]"
                        width={24}
                        height={24}
                      />
                    </a>
                  )}
                </div>
                <audio controls class="min-w-[500px]">
                  <source src={melody.audioUrl} type="audio/mp3" />
                </audio>
              </div>
            </li>
          ))}
        </ul>
      </div>
    }
  </div>
</div>
<style>
  .title {
    @apply flex w-full flex-row items-center space-x-1 align-top text-xl font-semibold text-[var(--text-color)] lg:text-2xl;
    @apply transition-all hover:text-[var(--primary-color)];
    font-family: var(--primary-font);
  }

  .data {
    font-family: var(--primary-font);
    @apply flex flex-row items-center;
  }

  .data > span {
    @apply inline-block self-center truncate align-middle text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .desc {
    @apply line-clamp-1 text-[var(--text-color)];
    font-family: var(--primary-font);
  }

  .reading-time {
    @apply space-x-3 align-middle text-sm text-[var(--text-color-lighten)];
    font-family: var(--primary-font);
  }

  .cover-container {
    @apply relative ml-2 hidden h-[212px] min-w-[404px] max-w-[404px] select-none lg:block;
    clip-path: polygon(0 0%, 100% 0%, 100% 100%, 10% 100%);
  }

  .cover-wrapper {
    @apply h-full w-full select-none overflow-hidden rounded-r-3xl;
  }

  .cover-wrapper::before {
    @apply absolute left-0 h-full w-0 select-none rounded-r-3xl bg-black opacity-50;
    content: "";
    z-index: 1;
    transition: all 0.3s;
  }

  .cover-wrapper::before:hover {
    @apply h-full w-full select-none;
  }

  .right-icon {
    @apply absolute left-1/2 top-1/2 z-[10] -translate-x-1/2 -translate-y-1/2 text-white;
    clip-path: polygon(0 0, 0 0, 0 100%, 0 100%);
    transition: all 0.3s;
  }

  .cover-wrapper:hover .right-icon {
    clip-path: polygon(0 0, 100% 0%, 100% 100%, 0 100%);
  }
</style>
